// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace CodeFirstT4Example
{
    using System.Linq;
    using CodeFirst.Common;
    using KadGen.Common;
    using CodeFirstMetadataTest.Diagnostic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class DiagnosticTemplate : CodeFirstT4CSharpBase<CodeFirstDiagnostic>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 10 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
 
	OutputGenerationWarning();
    var classMeta = Meta as CodeFirstDiagnostic;
 
            
            #line default
            #line hidden
            this.Write(@"using System;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace ");
            
            #line 23 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Meta.Namespace));
            
            #line default
            #line hidden
            this.Write(@"
{
   // TODO: Consider implementing other interfaces that implement IDiagnosticAnalyzer instead of or in addition to ISymbolAnalyzer

   [DiagnosticAnalyzer(LanguageNames.CSharp)]
   public class DiagnosticAnalyzer : ISyntaxNodeAnalyzer<SyntaxKind>
   {
      public const string DiagnosticId = """);
            
            #line 30 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Meta.Id));
            
            #line default
            #line hidden
            this.Write("\";\r\n      internal const string Description = \"");
            
            #line 31 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Meta.Description));
            
            #line default
            #line hidden
            this.Write("\";\r\n      internal const string MessageFormat = \"");
            
            #line 32 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Meta.MessageFormat));
            
            #line default
            #line hidden
            this.Write("\";\r\n      internal const string Category = \"");
            
            #line 33 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Meta.Category));
            
            #line default
            #line hidden
            this.Write(@""";

      internal static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Description, MessageFormat, Category, DiagnosticSeverity.Error, true);

      public ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }

      public ImmutableArray<SyntaxKind> SyntaxKindsOfInterest
      {
         get
         {
            return ImmutableArray.Create(SyntaxKind.IfStatement, SyntaxKind.ElseClause);
         }
      }

      public void AnalyzeNode(SyntaxNode node, 
         SemanticModel semanticModel, 
         Action<Diagnostic> addDiagnostic, 
         AnalyzerOptions options, 
         CancellationToken cancellationToken)
      {
      ");
            
            #line 53 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
 foreach(var analyzer in Meta.Analyzers) 
      {
            
            #line default
            #line hidden
            this.Write("         var ");
            
            #line 55 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(analyzer.Name));
            
            #line default
            #line hidden
            this.Write(" = node as ");
            
            #line 55 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(analyzer.Type));
            
            #line default
            #line hidden
            this.Write(";\r\n         ");
            
            #line 56 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(analyzer.Statements.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n      ");
            
            #line 57 "C:\Users\Kathleen\Documents\Visual Studio 2013\Projects\CodeFirstMetadata\CodeFirstT4Example\DiagnosticTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("      }\r\n\r\n      private void Report(Location location, string v, Action<Diagnost" +
                    "ic> addDiagnostic)\r\n      {\r\n         var diagnostic = Diagnostic.Create(Rule, l" +
                    "ocation, v);\r\n         addDiagnostic(diagnostic);\r\n      }\r\n   }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
