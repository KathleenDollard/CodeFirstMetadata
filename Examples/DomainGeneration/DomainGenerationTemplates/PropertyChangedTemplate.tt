<#@ template language="C#" inherits="CodeFirstT4CSharpBase<CodeFirstClass>" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\CodeFirstPropertyChanged\bin\Debug\CodeFirstPropertyChanged.Dll"  #>
<#@ assembly name="$(SolutionDir)\CodeFirstPropertyChanged\bin\Debug\CodeFirstMetadataCommon.Dll"  #>
<#@ assembly name="$(SolutionDir)\CodeFirstMetadataT4Support\bin\Debug\CodeFirstMetadataT4Support.Dll"  #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="CodeFirst.Common" #>
<#@ import namespace="KadGen.Common" #>
<#@ import namespace="CodeFirstMetadataTest.PropertyChanged" #>
<# 
// ******* THIS IS A TEST TEMPLATE FOR THE SAKE OF ALL HUMANITY, DON'T WRITE TEMPLATES LIKE THIS *******
// (instead, use the built-in C# features to avoid the quoted strings)
	OutputGenerationWarning();
    var classMeta = Meta as CodeFirstClass;
#>
using System;
using System.ComponentModel;

<# OutputNamespaceOpen(); #>

public class <#= Meta.Name #> : INotifyPropertyChanged

<#
PushBracket();
WriteLine();
foreach(var prop in Meta.Properties)
{ #>
<#= FieldDeclaration(prop.Name, prop.PropertyType.Name) #>;
<# } #>

public event PropertyChangedEventHandler PropertyChanged;

protected virtual void OnPropertyChanged(string name)
{
    if (this.PropertyChanged != null)
    {
        this.PropertyChanged(this, new PropertyChangedEventArgs(name));
    }
}

<#
foreach(var prop in Meta.Properties)
{
    OutputXmlComments(prop);
	 OutputAttributes(prop);
    var fieldName = MakeFieldName(prop.Name);
    var propertyName = MakePublicName(prop.Name);#>
<#= 
PropertyDeclaration(propertyName, prop.ScopeAccess, prop.PropertyType.Name) 
#>
<# this.PushBracket(); #>
<# if (prop.CanGet) { #>

get { return <#= fieldName #>; }
<# } #>
<# if (prop.CanGet) { #>
set
<# PushBracket(); #>

if (<#= fieldName #> != value)
{
   <#= fieldName #> = value;
   this.OnPropertyChanged("<#= propertyName #>");
}
<# PopBracket(); #>
<# }#>
<# this.PopBracket();
} #>
<# 
PopBracket();
OutputNamespaceClose(); 
#>
<#+
public override string FilePathHint
{
   get
   { return @"{ExecutionPath}\..\..\..\DomainOutput\{MetadataFileName}.g.cs";
   }
}
#>
