<#@ template language="C#" inherits="CodeFirstT4CSharpBase<CodeFirstDiagnostic>" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\CodeFirstAnalyzer\bin\Debug\CodeFirstAnalyzer.Dll"  #>
<#@ assembly name="$(SolutionDir)\CodeFirstAnalyzer\bin\Debug\CodeFirstMetadataCommon.Dll"  #>
<#@ assembly name="$(SolutionDir)\CodeFirstMetadataT4Support\bin\Debug\CodeFirstMetadataT4Support.Dll"  #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="CodeFirst.Common" #>
<#@ import namespace="CodeFirstMetadataTest.Diagnostic" #>
<# 
	OutputGenerationWarning();
    var classMeta = Meta as CodeFirstDiagnostic;
 #>
using System;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace <#= Meta.Namespace #>
{
   // TODO: Consider implementing other interfaces that implement IDiagnosticAnalyzer instead of or in addition to ISymbolAnalyzer

   [DiagnosticAnalyzer(LanguageNames.CSharp)]
   public class <#= Meta.Name #> : DiagnosticAnalyzer
   {
      public const string DiagnosticId = <#= Meta.Id #>;
      internal const string Description = <#= Meta.Description #>;
      internal const string MessageFormat = <#= Meta.MessageFormat #>;
      internal const string Category = <#= Meta.Category #>;

      internal static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Description, MessageFormat, Category, DiagnosticSeverity.Error, true);

      public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }

      public override void Initialize(AnalysisContext context)
      {
         context.RegisterSyntaxNodeAction(AnalyzeNodes, <#= String.Join(", ", Meta.Analyzers.Select(x=>x.SyntaxKind)) #>);
      }

      private void AnalyzeNodes(SyntaxNodeAnalysisContext context)
      {
<# foreach(var analyzer in Meta.Analyzers) 
      {
#>

         var <#= analyzer.VariableName #> = context.Node as <#= analyzer.PropertyType.Name #>;
         if (<#= analyzer.VariableName #> != null
               && (<#= analyzer.ConditionString.Trim() #>))
         {
            Location loc = <#= analyzer.GetLocationString.Trim() #>;
            Diagnostic diagnostic = Diagnostic.Create(Rule, loc, <#= analyzer.MessageArg #>);
            context.ReportDiagnostic(diagnostic);
         }
<# }#>
      }
   }
}
<#+
public override string FilePathHint
{
   get
   { return @"{ExecutionPath}\..\..\..\DiagnosticOutput\{MetadataFileName}2.g.cs";
   }
}
#>